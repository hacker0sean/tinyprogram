#include <windows.h>
#include <stdlib.h>
#include <conio.h>
#include <time.h>
#include <cstring>
#include <cstdio>
#include <iostream>
#define  N 22
using namespace std;

    int gameover;

    int x1, y1; // 随机出米

    int x,y;

    long start;

//=======================================
//类的实现与应用initialize
//=======================================

//下面定义贪吃蛇的坐标类
class snake_position
{
public:

    int x,y;      //x表示行，y表示列

    snake_position(){};

    void initialize(int &);//坐标初始化


};

snake_position position[(N-2)*(N-2)+1]; //定义贪吃蛇坐标类数组，有(N-2)*(N-2)个坐标

void snake_position::initialize(int &j)
{
        x = 1;

        y = j;
}


//下面定义贪吃蛇的棋盘图

class snake_map
{

private:

    char s[N][N];//定义贪吃蛇棋盘，包括墙壁。

    int grade, length;

    int gamespeed; //前进时间间隔

    char direction; // 初始情况下，向右运动

    int head,tail;

    int score;

    bool gameauto;

public:

    snake_map(int h=4,int t=1,int l=4,char d=77,int s=0)\
	:length(l),direction(d),head(h),tail(t),score(s){}

    void initialize();   //初始化函数

    void show_game();

    int updata_game();

    void setpoint();

    void getgrade();

    void display();


};

//定义初始化函数，将贪吃蛇的棋盘图进行初始化

void snake_map::initialize()
{
    int i,j;

    for(i=1;i<=3;i++)

        s[1][i] = '*';

    s[1][4] = '#';

    for(i=1;i<=N-2;i++)

        for(j=1;j<=N-2;j++)

            s[i][j]=' '; // 初始化贪吃蛇棋盘中间空白部分

    for(i=0;i<=N-1;i++)

        s[0][i] = s[N-1][i] = '-'; //初始化贪吃蛇棋盘上下墙壁

    for(i=1;i<=N-2;i++)

        s[i][0] = s[i][N-1] = '|'; //初始化贪吃蛇棋盘左右墙壁
}


//============================================
//输出贪吃蛇棋盘信息

void snake_map::show_game()

{

    system("cls"); // 清屏

    int i,j;

    cout << endl;

    for(i=0;i<N;i++)
    {

        cout << '\t';

        for(j=0;j<N;j++)

            cout<<s[i][j]<<; // 输出贪吃蛇棋盘

        if(i==2) cout << "\t等级：" << grade;

        if(i==6) cout << "\t速度：" << gamespeed;

        if(i==10) cout << "\t得分：" << score << "分" ;

        if(i==14) cout << "\t暂停：按一下空格键" ;

        if(i==18) cout << "\t继续：按两下空格键" ;

        cout<<endl;
    }
}

//输入选择等级
void snake_map::getgrade()
{
    cin>>grade;

    while( grade>7 || grade<1 )
    {
        cout << "请输入数字1-7选择等级，输入其他数字无效" << endl;

        cin >> grade;
    }x
    switch(grade)
    {
        case 1: gamespeed = 1000;gameauto = 0;break;

        case 2: gamespeed = 800;gameauto = 0;break;

        case 3: gamespeed = 600;gameauto = 0;break;

        case 4: gamespeed = 400;gameauto = 0;break;

        case 5: gamespeed = 200;gameauto = 0;break;

        case 6: gamespeed = 100;gameauto = 0;break;

        case 7: grade = 1;gamespeed = 1000;gameauto = 1;break;

    }

}

//输出等级，得分情况以及称号

void snake_map::display()
{

    cout << "\n\t\t\t\t等级：" << grade;

    cout << "\n\n\n\t\t\t\t速度：" << gamespeed;

    cout << "\n\n\n\t\t\t\t得分：" << score << "分" ;

}

//随机产生米
void snake_map::setpoint()
{
    srand(time(0));

    do
    {

        x1 = rand() % (N-2) + 1;

        y1 = rand() % (N-2) + 1;

    }while(s[x1][y1]!=' ');
`

    }

    return 0;
}
